---
import Navbar from '../components/navbar/Navbar.astro';
import Box from '../components/Box.astro';

interface Props {
	title: string;
}
const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="dark h-full w-full">
	<head>
		<script is:inline>
			const tema = (() => {
				if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
					return localStorage.getItem("theme");
				}
				if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
					return "dark";
				}
				return "light";
			})();
			if (tema === "dark") {
				document.documentElement.classList.add("dark");
			} else {
				document.documentElement.classList.remove("dark");
			}
		</script>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>

	<body class="min-h-screen w-full bg-gray-200 p-6 dark:bg-darkBg relative">
		
		<div id="backdrop" class="fixed inset-0 bg-black/30 backdrop-blur-sm z-40 hidden sm:hidden"></div>
		
		<div class="min-h-screen grid grid-cols-1 sm:grid-cols-[auto,1fr] gap-6">
			<Navbar />
			<main class="w-full">
				<Box title={title}>
					<slot />
				</Box>
			</main>
		</div>

		<script>
			const sessionToken = localStorage.getItem('session_token');

			async function validateSession() {
				if (!sessionToken) {
					redirectToLogin();
					return;
				}

				const response = await fetch('http://localhost:8000/api/check/validate-session', {
					method: 'GET',
					headers: {
						'Content-Type': 'application/json',
						'session-token': sessionToken,
					},
				});

				if (!response.ok) {
					if (response.status === 401) {
						console.warn('Sesión inválida o expirada');
						localStorage.removeItem('session_token');
						redirectToLogin();
					} else {
						console.error('Error al validar la sesión, código:', response.status);
					}
				} else {
					const data = await response.json();
					console.log('Sesión válida:', data);
				}
			}

			function redirectToLogin() {
				window.location.href = '/login';
			}

			(function () {
				const savedTheme = localStorage.getItem("theme");
				if (savedTheme === "dark" || (!savedTheme && window.matchMedia("(prefers-color-scheme: dark)").matches)) {
					document.documentElement.classList.add("dark");
					document.documentElement.classList.remove("light");
				} else {
					document.documentElement.classList.add("light");
					document.documentElement.classList.remove("dark");
				}
			})();

			validateSession();
			setInterval(validateSession, 60000);

			window.addEventListener('DOMContentLoaded', () => {
				const navbar = document.getElementById('navbar');
				const hamburgerBtn = document.getElementById('hamburger-btn');
				const backdrop = document.getElementById('backdrop');

				document.addEventListener('mousedown', (event) => {
					const target = event.target as Node;
					if (
						window.innerWidth < 640 &&
						navbar?.classList.contains('-translate-x-full') === false &&
						!navbar?.contains(target) &&
						!hamburgerBtn?.contains(target)
					) {
						navbar?.classList.add('-translate-x-full');
						backdrop?.classList.add('hidden');
						hamburgerBtn?.classList.remove('hidden');
					}
				});
			});
		</script>
	</body>
</html>

<style is:global>
	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}

	nav a {
		color: #333 !important;
	}
	.dark nav a {
		color: #F5F5F5 !important;
	}

	html, body {
		font-family: system-ui, sans-serif;
	}
</style>
